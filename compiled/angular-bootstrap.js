// Generated by CoffeeScript 1.3.3
(function() {

  angular.module('angularBootstrap', ['angularBootstrap.modal', 'angularBootstrap.tabs']);

  /*
  modal. Restrict class. Options:
  	ng-model (scope-variable, optional, default=none)
  	  If ng-model is NOT set, this will behave like a normal
  	  bootstrap modal, except backdrop/keyboard options will be used
  	  If ng-model IS set, the value will be set to true whenever the
  	  modal is open, and false when it is closed.
  	  Additionally, you may set it to true to open the
  	  modal and set it to false to close it.
  	backdrop: (boolean, optional, default=true)
  	  Decides whether the modal has a backdrop when opening
  	keyboard: (boolean, optional, default=true)
  	  Decides whether the modal can be closed with escape key	
  
  Example usage, showing both ways of opening/closing the modal:
  <div id="myModal" class="modal hide" ng-model="modalVariable">
  	<button ng-click="modalVariable = false">Close Modal</button>
  </div>
  <a href="#myModal" data-toggle="modal">Open Modal</a>
  */


  angular.module('angularBootstrap.modal', []).directive('modal', [
    '$timeout', function($timeout) {
      var $;
      $ = jQuery;
      return {
        restrict: 'C',
        require: '?ngModel',
        scope: {
          backdrop: 'evaluate',
          keyboard: 'evaluate',
          ngModel: 'accessor'
        },
        link: function(scope, elm, attrs, model) {
          $(elm).modal({
            backdrop: scope.backdrop,
            keyboard: scope.keyboard,
            show: false
          });
          if (model == null) {
            return;
          }
          scope.$watch((function() {
            return scope.ngModel();
          }), function(value) {
            if (value === true) {
              return $(elm).modal('show');
            } else {
              return $(elm).modal('hide');
            }
          });
          $(elm).bind('shown', function() {
            return $timeout(function() {
              return scope.$parent.modalShown = true;
            });
          });
          return $(elm).bind('hidden', function() {
            return $timeout(function() {
              return scope.$parent.modalShown = false;
            });
          });
        }
      };
    }
  ]);

  /*
  strap-tabs
  Example usage:
  <strap-tabs>
  	<strap-tab title="Hello">Content</strap-tab>
  	<strap-tab title="getTitle()"><h1>I love things!</h1></strap-tab>
  	<div ng-repeat="stuff in things">
  		<strap-tab title="{{stuff}}">{{stuff.things}}</strap-tab>
  	</div>
  </strap-tabs>
  */


  angular.module('angularBootstrap.tabs', []).directive('strapTabs', [
    '$timeout', function($timeout) {
      var controllerFn;
      controllerFn = function($scope, $element, $attrs) {
        $scope.tabs = [];
        $scope.$watch('tabs.length', function(tabsL, oldL) {
          if (tabsL > 0 && tabsL < oldL) {
            if ($scope.tabs.indexOf($scope.selectedTab === -1)) {
              return $scope.selectTab($scope.tabs[Math.max($scope.selectedIdx - 1, 0)]);
            }
          }
        });
        $scope.selectTab = function(tab) {
          var _i, _len, _ref, _tab;
          _ref = $scope.tabs;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            _tab = _ref[_i];
            _tab.selected = false;
          }
          tab.selected = true;
          $scope.selectedTab = tab;
          return $scope.selectedIdx = $scope.tabs.indexOf(tab);
        };
        this.addTab = function(tab, index) {
          $scope.tabs.push(tab);
          if ($scope.tabs.length === 1) {
            return $scope.selectTab(tab);
          }
        };
        return this.removeTab = function(tab) {
          return $timeout(function() {
            return $scope.tabs.splice($scope.tabs.indexOf(tab, 1));
          });
        };
      };
      return {
        restrict: 'E',
        transclude: true,
        controller: controllerFn,
        template: "<div class=\"tabbable\">\n	<ul class=\"nav nav-tabs\">\n		<li ng-repeat=\"tab in tabs\" ng-class=\"{active: tab.selected}\">\n			<a href=\"\" ng-click=\"selectTab(tab)\">{{tab.title()}}</a>\n		</li>\n	</ul>\n	<div class=\"tab-content\" ng-transclude>\n	</div>\n</div>"
      };
    }
  ]).directive('strapTab', [
    function() {
      var linkFn;
      linkFn = function(scope, elm, attrs, container) {
        container.addTab(scope);
        return scope.$on('$destroy', function() {
          return container.removeTab(scope);
        });
      };
      return {
        restrict: 'E',
        transclude: true,
        require: '^strapTabs',
        link: linkFn,
        scope: {
          title: 'accessor'
        },
        template: "<div class=\"tab-pane\" ng-class=\"{active:selected}\" ng-show=\"selected\" ng-transclude></div>"
      };
    }
  ]);

}).call(this);
