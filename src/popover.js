// Generated by CoffeeScript 1.3.3
(function() {

  angular.module('angularBootstrap.popover', []).directive('popover', [
    function() {
      var $, defaults, getBounds, linkFn;
      $ = jQuery;
      defaults = {
        placement: 'right'
      };
      getBounds = function($el) {
        return $.extend($el.offset(), {
          width: $el[0].offsetWidth || $el.width(),
          height: $el[0].offsetHeight || $el.height()
        });
      };
      linkFn = function(scope, elm, attrs) {
        var $this, directiveOptions, hidePopover, showPopover, togglePopover;
        $this = $(elm).hide().addClass('popover');
        directiveOptions = {
          placement: scope.placement
        };
        showPopover = function(options) {
          var decidePosition, popBounds, sourceBounds;
          popBounds = getBounds($this);
          sourceBounds = getBounds(options.$source);
          decidePosition = function() {
            switch (options.placement) {
              case 'left':
                return {
                  top: sourceBounds.top + sourceBounds.height / 2 - popBounds.height / 2,
                  left: sourceBounds.left - popBounds.width
                };
              case 'top':
                return {
                  top: sourceBounds.top - popBounds.height,
                  left: sourceBounds.left + sourceBounds.width / 2 - popBounds.width / 2
                };
              case 'right':
                return {
                  top: sourceBounds.top + sourceBounds.height / 2 - popBounds.height / 2,
                  left: sourceBounds.left + sourceBounds.width
                };
              case 'bottom':
                return {
                  top: sourceBounds.top + sourceBounds.height,
                  left: sourceBounds.left + sourceBounds.width / 2 - popBounds.width / 2
                };
            }
          };
          return $this.remove().appendTo($source).css(decidePosition()).fadeIn(250);
        };
        hidePopover = function(options) {
          return $this.fadeOut(250);
        };
        togglePopover = function(options) {
          if ($this.css('display') === 'none') {
            return showPopover(options);
          } else {
            return hidePopover(options);
          }
        };
        return $this.bind('popoverShow', function(evt, eventOptions) {
          return showPopover($.extend(defaults, directiveOptions, eventOptions));
        }).bind('popoverHide', function(evt, eventOptions) {
          return hidePopover($.extend(defaults, directiveOptions, eventOptions));
        }).bind('popoverToggle', function(evt, eventOptions) {
          return togglePopover($.extend(defaults, directiveOptions, eventOptions));
        });
      };
      return {
        restrict: 'E',
        scope: {
          title: 'evaluate',
          placement: 'evaluate'
        },
        link: linkFn,
        transclude: true,
        template: "<div class=\"arrow\"></div>\n<div class=\"popover-inner\">\n	<h3 class=\"popover-title\">{{title}}</h3>\n	<div class=\"popover-content\" ng-transclude></div>\n</div>"
      };
    }
  ]).directive('popTarget', [
    function() {
      var $, linkFn, triggerPopover;
      $ = jQuery;
      triggerPopover = function($target, $source, eventType, options) {
        return $target.trigger(eventType, [
          {
            $source: $source,
            placement: options.popPlacement,
            eventType: options.popEvent
          }
        ]);
      };
      linkFn = function(scope, elm, attrs) {
        var $target, $this, events, figureOutPopoverEvents;
        $target = $(attrs.popTarget);
        $this = $(elm);
        figureOutPopoverEvents = function() {
          switch (attrs.popEvent || 'hover') {
            case 'hover':
              return {
                on: 'mouseenter',
                off: 'mouseleave'
              };
            case 'focus':
              return {
                on: 'focus',
                off: 'blur'
              };
            case 'click':
              return {
                toggle: 'click'
              };
          }
        };
        events = figureOutPopoverEvents();
        if (!(events != null)) {
          return;
        }
        if (events.toggle) {
          return $this.bind(events.toggle, function() {
            return triggerPopover($target, $this, 'popoverToggle', attrs);
          });
        } else {
          return $this.bind(events.on, function() {
            return triggerPopover($target, $this, 'popoverShow', attrs);
          }).bind(events.off, function() {
            return triggerPopover($target, $this, 'popoverHide', attrs);
          });
        }
      };
      return {
        restrict: 'A',
        link: linkFn
      };
    }
  ]);

}).call(this);
